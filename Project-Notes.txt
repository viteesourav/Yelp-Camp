***Building a fully functional Website including Servers and interactive UI using all important concepts of WEB-DEV-Fundamentals***

Important NOteS:

**Setting up the basic Routes and Templates for the project**
    -- Make the project modular, Try with basic route and keep the model and seed files seperate.
    -- To include partials in your dynamic HTML template, we can use a package called ejs-mate.
    **ejs-mate**
    -- ejs-mate is better and efficent than using partials for templating duplicate things in project.
    -- add the npm package, add the app.engine for ejs to ejs-mate. define boilerplate.ejs with the dynamic body tag.
    -- we define a boilerplate template and then whenever you call layout('boilerPlate location') in one form, it is passed to the <%- body %> area of the boiler plate template.
    -- textArea --> Dont have a value attribute.
    -- in bootstrap, class="col-md-4 offset-4 mb-5", means you will occupy 4 md columns out of 12 and adding offset will start it after the starting 4 columns.
    -- in form, class= "d-inline", will push the form to get inline with the rest of the content.

*******************************************************************************************************************************************************************************************************    
NOTE(Just something that needed to be very clear):
    -- JS by nature runs sync, means runs the code line by line, top to bottom.
    -- if a function is async it means, anything after that function will run immediately.
    -- async funs always return a promise object, which is either resolved or failure based on the nature of the response.
    -- inside the async fun, if we have multiple calls to db, or file or api, we can use await function, it will await for the response to come and then move to the next server call.
    -- That is why we use await only inside async funcs, to wait for the response of the server call.
    -- eg: setTimeout is a built-in async call, it runs the callback back function after the specified time, but won't block other function written after it. those will run anyway.
        After the specified time, automatically, the response will be printed out. Thus Async Functions are powerful Functions :> RESPECT THEM !
*******************************************************************************************************************************************************************************************************    

**Including Server-side and client Side validations**
    
    -- Client-side validation options available, we can use the html 5 inline 'required' keyword to do the validations (handled by the browser) or can use the bootstarp validation class (makes more sense and looks nice too).
    -- use the bootstrap validations to do the client side validations.
    -- Note: using novalidate in form as attribute will ignore any required added for any input.
    
    -- Server-side validation, we need to handle mongoose error and middleware errors.
    -- add the custom error-handler class, add a util folder, with custom ExpressError fun and the wraperAsync catch function(this will catch error inside async functions).
    Note: 
    if you use app.all('*', (req,res,next)=>{...}) --> this will trigger if none of the top route matched. (It has to be at the end, because route order is important).
    -- declare custom error handler and throw error whereever required to handler possible mongoose error or req body or param error etc.
    
    -- For schema validation, we will use Joi schema valiation, put it as a middleware function and call it before the route callbacks of post and edit.
    -- if this middleware throws an error, the default custom middleware at the end will catch it and process it.

**Adding Review Model for Our Yelp-camp**
    -- New Review Schema is add. 
    -- Review and Campground schema will have one to many Relationship. single campground can have mulitple reviews.
    -- make sure before writing the route call, What will be the best url for that route. eg: Since i need to store camp details also while svaing a review, Route should have the campground id.
    -- client side validation is needed, using botstrap validation method and form level validations.
    -- server side, add a Joi Schema validation and async middleware to catch any error in the from schema or during any mongoose operations.
    
    ****VEry Important, Very useful****
    -- For Deleting Review functionality, we are going to use a Mongoose operator $Pull, it can remove any matching value from an array that satisfys the conditions, Syntax: { $pull: { <field1>: <value|condition>, <field2>: <value|condition>, ... } }
    ***********************************
    -- Another Situation: If a campground is deleted, then whole List of comments associated with it also needs to delete.
    -- campground delete middleware,
    
**Restructuring the Campgroud index.js and Adding cookies and Sessions**
    -- we Have shited all the Campgrounds related routes to one seperate folder with all the required dependencies.
    -- we Have shited all the Review related routes to one seperate folder with all the required dependencies.
        NOTE: **Very Important**
        -- In review related routes, as prefix we will be sending campID as path param 
        -- For Express Router to treat it as path param, we must pass one param while defining Router.
        -- eg: const Router = express.Router({mergeParmas: true});                
    
        -- Next we have to manage our static elements including breaking down the boiler scripts and put a public folder and serve it using express.Static().
    -- NOTE: If you are serving a folder using express.static like views and public, the entire content of the folder is served and you can directly used without mentioning the dir path.

    -- Configuring session and Flash
        -- For now we will be using the local memory session store. Later we will move it to mongo.
        -- we will send some cookie paramter also like expire, maxAge(in millisecond) and httpOnly (Extra security that saves from accidental reveal of cookies to 3rd party) --> refer the express Documentation.
        -- setup connect-flash and flash middleware to make use of flash messages on actions.
        -- flash partials for success and error alerts Done.
*******************************************************************************************************************************************************************************************************

NOTE: If you trying to add a file location inside require, VSCode will give suggestion.
   -- If you trying to destructure, It will not. i.e const { middleware } = require('..path'), here you will not get suggestions for path by vscode.
   -- If you do like this, require('..path'), then assign it to const middleware or destructure it like const {middleware}, This is efficient Practise with nodeJS require path.


**Adding Authentication And Authorization into the APP**

Authentication using Passport: (Passport middleware for NOde JS)
    Why ? 
        -- It hides most of the implementation logic of Authentication.
        -- It grows with your app, And has easy accessibility to other strategies of login like local strategy, google login, facebook login etc.
        -- It is faster to implement.
    NPM Packages we are using: 
        -- passport - the main package needed for passport implementation.
        -- passport-local - It's used for simple username and password authentication.
        -- passport-local-mongoose 
            - local authentication implementation simplified using mongoose, It handles the username and passowrd in local authentication.
            - To the existing schema. it adds username, hashed password and salt.
            - Also it provides a bunch of methods for handling authentication.
1) For Registering the User details in the DB:
    -- In the model file, You just need plugin passport-local-mongoose into the schema Object.
    -- We need to use passport.session always after the app.session [IMP]
    -- Now we need to register the user with an userObj and password. This uses a different password hashing method and stores the data along with salt and hashed password.
    NOTE: .register static method
    -- It is a static method added by passport-local-mongoose in the Schema file. Scheam Object will have access to register method.
    -- Register will also save the data in the db. [V.IMP]
    -- Also it do validation on the username, If the same username exists.
    To handle the Login When an user is just registered ?
    -- req.login() -> passport helper method that do the authentication and made the user availble for the session.
    
    All the above is to just Get an Valiate user to Register and store in the DB. NOw we need to make sure the Login works... 
2) For Login in APP:
    -- Passpert provide a middleware to authenticate the user trying to login. -> passport.authenticate('local', {Options}) [defined local for the type of login we are handling..] 
    -- It provides 2 options
    failureFlash -> bool that shows a popup
    failureRedirect -> take's a redirect path in case of login failure.
3) Handle session for the loggedin User:
    -- req.isAuthenticated() -> It can help checks if the user is present in the session or not ?
    -- this method is a availble for req. [IMP]
    -- Added it as a middleware to Protect all the Routes we have.
4) Implementing LogOut:
    -- req.logout() - Passport helper method availbale to logout.
    NOTE: ms-auto, set the nav-links to the right side.
5) Return to the same page after login:
issue ?
    -- suppose you try to load one page, and it loads but then it redirect to login.
    -- After login, you need to start from the home screen to reach the same page,
    -- To Make it more User friendly, we can take the OriginalUrl from the req i.e req.originalUrl and Redirect to that whne we attempt login.
Problem: We cannot store the data in the session, since after login, previous session gets cleared up.[Imp]
Solution: we use a middleware and res.locals, these are directly accessable to all templates and req,res cycles.
Steps:
    -- First in middleware where you check if the user is logged in or not ? If not then store the redirectUrl in req.session from req.originalUrl. 
    -- Before the login passport authentication middleware, call a new middleware and transfer the redirectUrl from req.session to res.locals. 
    -- In the login, before redirecting check if you have any redirectURL else just redirect to home page.

NOTEs: [Important]
    -- Once the user is authenticated, req.user, will contains information about the current User, It contains the deSerialized userDate from the session.
    -- anything you pass as res.local.dummyKey is accessable to all the templates. basically you can use dummyKey directly in the render files.
    In Express.js, 
    -- res.locals is an object that provides a way to pass data through the application during the request-response cycle. 
    -- It allows you to store variables that can be accessed by your templates and other middleware functions.

** Handling Authorization **
    -- All CRUD Layer Operations must be specific to Users. Thus, Linked Campgroud Schema with users.
    -- In the client, Authorization can be handled by comparing the loggedIn User form req.user and the Campground data we store in the database.
    -- For Server Side authorization,
       Need to define a middleware, that checkes if the logged in user is same as the campgraound user ? If yes allow him else Show proper error message.
    -- Also make sure to cover Authorization for showing the page and the API Route. eg: editCampground page and editCampground route both should be protected.
NOTE:
-- Project is little re-structured, All the middleware funtions are put in one middleware file, under utility folder.
-- we can do nested populate also. Like campground has users and reviews, we will populate both but again reviews have users too. We need to populate them...
   For this we can chain populate and for populating the nested one, 
   .populate({path: 'reviews', populate: { path: 'users'}}) --> this means you are first populating all the reviews and then for each reviews you are populating users.

NOTE:
-- Always while handling Authorization of any model, like Campground or Review, You Make sure you go from API to Show page.
   Means, First handle the Authorization of the concerned API, then, the button visibility and then Page from where the API is triggered

Thus, This concludes adding passport Authentication, adding a middleware that checks if the user is loggedin, Adding Authorization based on the loggedIn user.

NOTE: MVC -> Model View controllers. 
 Model -> Contains the Schema and Structure of an entity.
 View -> Stores all the static Files, layouts, Front-end Stuff realted to the Enity.
 Controller -> This is the place where you bring together Models and Views and use them to Control the Flow.

**REstructing Code Structure**
-- We will clear the Route Files by moving the (res,req) callback functions to its Controller
-- and we will also group Routes having same Route path but different Verb with Express Router.route

Controllers:
  -- We will have controllers for each model, that contains the functionality.
  -- We have Route Specific Controllers that handles the Operations of each Routes inside the Controllers.

NOTE: [Imporatant]
  -- Express Router provides a route function to group all the verb for the same path.
   eg: Router.route('..path')
        .get(...Runs when get is triggered for the above path...)
        .post(...Runs when get is triggered for the above path...)
        .put(...Runs when get is triggered for the above path...)
  -- whenever we are Restructuring Routes, Always make sure the Order of the Routes matters. [Very Very Important] 

**Improving the Rating functionality**
    -- Tool used: Starability, (a github repo with the required css availble for Star functionality)

** Adding impage Upload Feature For our Camp **
Problems ?
1) Basic Form cannot send document/File to Server. (NOt possible)
2) Even if we manage to send File to server, It cannot be stored in Mongo. 
   Why ? 
   -- BSON has can handle documetn size maximum upto 16 MB.
   Solution ? 
   [cloudinary]
   -- we can use a free image Hosting and API website for storing Images.
   -- It will store the image and give us a public url to fetch it whenever we need.

  ** How to Enable Forms to Accept Document and send it to Server ? 
  -- By default, forms are submitted using encoding ->enctype: application/x-www-form-urlencoded [this is default]
  -- For files support we need to specify, enctype: multipart/formData.
  
  In Server side, To parse multipart-data, we need another middleware. [Multer]
    -- It is a npm Package, used to handle multipart-data, Mainily used to handle Files.
    -- It baiscally, add 2 things to req,
       1) body -> Contains the text containt from the Form.
       2) file/files -> Contains the files containts from the Form.
    -- It can store data localy also. [not preferred]
    -- require the multer middleware, and execute it. eg: const upload = multer({dest: '/uploads'})
    NOTE: Here dest is option, Here we are stroing the uploaded files locally in a folder called uploads.[will move it to cloudinary]
  1) For Handling single File:
    -- upload.single('nameOfTheFieldTakesFile'), add this as middleware, which parse the mutipart form data.
  2) For Handling Multiple File upload:
    -- add an attribute in the file type input, multiple[this is the key name]
    -- upload.array('nameOfTheFieldTakesFile') --> will put all the files data in req.files [Note: 'files' for multiple and 'file' for single.]
  3) For handling Form with no files:
    -- for parsing a form data with just texts and enctype as mutipart.
    -- add upload.none() middleware in the Route handler.

  ** handling Private API key and Secret information.
    -- You make a new file, .env -> Stores all key-value pair of information. eg: SECRET=12345
    -- NPM package to access this file --> dotEnv
    -- require('dotenv').config(), will bring your env variables to process.env
    -- You can use the env Variable using the key, to get the value needed, eg: process.env.API_KEY -> this will getch API_KEY value from the .env file
    NOTE: In development Mode, you use .env to bring Private info for APP, In production, It will be set in the env, no need for .env [Important]
    NOTE: This .env file is not pushed to repo, so added in .gitignore [**It's for personal use only**]

  ** Integration With cloudinary and multer
    -- need to install [cloudinary Package] and [multer-storage-cloudinary]
    -- cloudinary config the account.
    -- multer-storage-cloudinary will upload the files and store the image url in the req file. [simplify the upload process]
    -- It provides a way to connect to cloudinary account, uplaod the image and generate a url, fetch the image based on url under req.files.path
    Advantage ? 
      -- huge image sizes can be uploaded and stored in cloudinary, the cloudinary url can be stored in mongo.
      -- we can use it to manage image properties, its height, width and crop levels. 
  
  ** Project Updates For Image uploads:
    -- We will Add Multi-Campground Image Support for each Campground.
    -- Updating the Schema, JOI Validations, Forms Changes for newCamp, showCamp.
    NOTE: [IMP]
        -- Since we changed the form enctype, Data submitted from form is not accessable until we parse it using multer.
        -- All validations, controller functions need to form data, For this, multer should comes first, that parse the data and then passed to the controller functions.
    -- We will use Bootstrap's Carousel to show the image's Uploaded for each Add New Action.
    NOTE: The scroll functionality is handled for camp with one image and multiple images, Those left-Right toggels wont show in case of single img camp
    -- We have handled the image upload both from add new camp and edit camp [here in edit, we can add more images to existing one].
    Next we are modifying the image upload button.
    -- Even with bootstrap, need a package [bs-custom-file-input] to manage the functionality. NOTE: we can just copy the CDN and add to boiler plate, Add the init() in validation js file [in public]
    NOTE: Upate the div and label for File input by adding class: custom-file and  custom-file-label, [Without this the feature wont work !]
    -- WE nee to handle when we need to delete any images ?
    -- we can use checkboxs to allow users to select what images they want to delete and send it to the server side.
    NOTE: for checkbox input if we declare name as deleteImgs[], then whatever is selected, that value will be inserted into the deleteImgs Array.[That is how we handle checkbox]
    -- Handling Image deletion:
    We need to handle deletion of images from 2 places...
    1) we need to delete the images from cloudinary
    2) we need to remove the filename form the images array in mongo.
    Feature Added: If only one Pic is there for the Camp, Checkbox will be disabled.

    ** Cloudinary Image Transformation ** [Ref: https://cloudinary.com/documentation/transformation_reference]
    -- Cloudinary, Provides one cool feature like:
       WE can add a bunch of properties in the image url eg: .../upload/w_150,h_150/....
       This will transform the images as per the property defined in the url. [Wooow !! Cool fetaure !!]
    -- We will define a virtual property in schema, and update the url with the thubnail url we need.

*** Yelp-Camp and Maps ***
  -- Tool we will be using is: MapBox
  -- Take the public Token and save it to the env file.
  -- we also need npm client from mapbox: @mapbox/mapbox-sdk
  -- Link to see all the services mapbox npm package provides: https://github.com/mapbox/mapbox-sdk-js/blob/HEAD/docs/services.md
  
  HOw we are going to Integrate Map to Yelp-Camp ?
  -- We will take the location, the user Enters and Geo tag it -> fetch latitude and logitude[geoCode data] -> that we save in our DB.
  -- Then based on this data, we can show a pin on the map.

  ** GeoCoding ** [Ref:https://docs.mapbox.com/help/getting-started/geocoding/]
    -- Based on the location, we need to get the lat and long of that place.
    -- we will use mapbox npm API(forwardgeocoding) to fetch lat and long based on text provided for location.
    -- we will store the geoCode data returned from the API in our Database, Later use it to show it in the map.
    NOTE: Response path for fetching the long and lat -> response.body.feature.geometry.coordinate
    -- By default this will return 5 matching response of the possible places. We can limit it to 1 place.
    NOTE:
    response.body.feature.geometry --> returns something called as geoJSON. [It has 2 keys, type and coordinate].

  ** geoJSON **
  -- special type of JSON that handles location based data.
  -- It has 2 mandatory Key -> type and coordinate.
  Why we use it ?
  -- mongo has special functionality built specific for handling geoJSON type of data.

  ** Displaying Map Based on geoJSON data *** [Ref: https://docs.mapbox.com/mapbox-gl-js/guides/]
  -- We will use mapbox gl JS library to Display interactive maps and customize it.
  -- customise with help of references and examples.
  -- Popup Fucntionality added when you click on the Pin Icon on the Map.

  ** Adding Cluster Map Feature *** [Ref: https://docs.mapbox.com/mapbox-gl-js/example/cluster/]
  -- Baiscally we will take the example code from mapbox gl js cluster map, and will manipulate to put our data in there.
  NOTE:
     While using the cluster map, when we send camp data from template to JS...
     -- BAsically we have to use ejs <%- ... %> to extract the data, then formate it based on how the cluster map is expecting.
  -- understadning how cluster map code works, can help us customise it more.
  NOTE: [IMP]
  -- Cluster Map of mapBox expect to receive the data in a particular fomate. [Ref: https://docs.mapbox.com/help/getting-started/creating-data/]
      1) The Whole data should be inside feature Array, -> eg: feature: [{...}, {....}];
      2) Each Object should have geometry data. Geometry data means geoJSON Data. eg: {geometry : {type: "Point", coordiante:["lng", "lat"]} }
      3) EAch Object must have properties, It contains info for the Object. 
      NOTE: Smart way to handle this, We can have a virtual property, that prepare this key with the details we need.
  Project Updates:
  -- Added few more steps for the clustor Map, BAsically gave the limits for switching between the cluster circles,
  -- Specified the radius and color of the Cluster circles.
  -- Specifed the radius and color for the unClustor-Circles.

  ** Updating Styling Using Bootstrap and custom CSS **
  
  IMP --> Here we use few bootstrap class that we frequently use to build basic web pages. [Pay more Attention to the bootstrap classes and the CSS files]

  Project updates:
  -- Adding a home page, For CampGround, Using bootstrap and Custom Css to Style it.
  -- Making the Login Screen, Registration Screen, All Campground page looks more presentable, with card layout and bootstrap.
  -- Adding Responsive-ness to Edit and add new camp pages.
  -- Adjusted the pitch of the cluster map, also removed the inline styles from the maps.

** Handling Security Issue with APP **
  
1) SQL Injections:
    -- One type of vunerabilty That applications need to face.
    -- If you we have a search query that takes input dynamically, eg: we are fetching user details based on username from form.
    -- For Injection:
       insetead of sending the username, the field carrys a bunch of SQL queries that access the DB and may damage the database Entires.

 Similarly, Mongo Injections are possible..
   eg: db.users.find({username: req.body.name});  --> return the user details matching the name.
   But if in name, we pass: {"$gt": ""}
       db.users.find({username: {"$gt":""}});  -> find all users greater than nothing, Returns all the users from DB. [vunerability]

 Solution: express-mongo-santize [npm package]
   -- It removes any Prohibited characters like '$' and '.' that are sent as req query or params or body to the DB.
   -- Simply import it and use it in the app. It filters out the Prohibited items.

2) Cross-site Scripting (XSS): 
   -- enables attackers to inject client side scripts into web pages viewed by the users.
   -- This vunerability is famous and most frequently can be found in websites.
   -- Cookies are by default availble under documents.cookies. It can be steal using JS script if not protected.
   -- basically, scripts can be embeeded into the urls or links, that are injected in the user's webpage which steals data.
   eg: Suppose you have an website up and running...
   Now, hacker can have a url made, Where the url also contains <script>....</scripts> as query. This Script will run if you click on the link.
        Once clicked, now the injected scripts runs in the users browser page and can pull senstive informations.
   
Situation: 
   App has form inputs, Now anyone can put html tags OR scripts in that form Inputs, That can break the code. [example of XSS scripting]
        -- Whenever we use ejs syntax <%= ... %>, This going to skip the html Characters. -> It converts the HTML tags into Enity codes.
        -- But It doesn't protect the APP, If we insert something like: <script> alert('Hello') </script> in the from text input. [danagerous, This way hackers can access users cookies and session data]
    Problem:
        -- we are using JOI validator, It validates the input but doesn't sanitize the input. 
        -- Possible Tool can be used: express-validator [npm package, similar like JOI, comes with sanitizer, Syntax are long and confusing].
    Solution:
        -- JOI, we will enhance to include santize the incoming HTML, It wont allow any html tags and most importantly not allow any scripts.
        -- we can define extension on JOI on the JOI string type, defining custom rules for santizing the content.
        -- ALso Needs a package: [sanitze-HTML]
        -- Define a custom extention function to santise the String lebels, and throw error.

3) Sessions and Cookies update:
    Requirement for Cookies:
        -- httpOnly: Cookies are accessable only by http, It cannot be accessable to Javascript.
        -- secure: Cookies are available only for https. [NOTE: used in production, localhost is not secure.]
        -- change the default name of express-session:
           default-name: connect.sid

4) Hide Stack Trace Errors:
    -- Based on if the env is production or not we cna hide or show the error stack.
    -- Well i am showing just the error message in both local and Production case.
    -- The error stack will print in the server log.

5) Helmet: [Ref: https://helmetjs.github.io/] [VIMP]
    -- It provides security related middlewares for HTTP headers.
    -- secure EXpress APP by setting HTTP response Header.
    -- It comes with some 11 different middleware.
    NOTE: The App will crash after installing helmet, All the external CDNs links and Images needs to have an attribute like: crossorigin = "anonymous"
    -- Helmet will automatically add many security related response headers, makes any attack difficult.

** Configuring Content security Policy (CSP):
    -- It allows only those external url that we mention in the CSP directive configurations. Other External url it wont allow.
    -- This Response header helps in mitigating more of cross-site scripting attack.
    -- Basically, Using this policy we can allows website, which are the external sources are trusted and can be loaded to our application.
    -- We need to mention all the external URLs that we are using and use it to configure the CSP.
NOTE: If you using Bootstrap latest, We need to include "https://cdn.jsdelivr.net" to both allowed scripts and styleSheets.